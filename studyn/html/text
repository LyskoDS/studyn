text-align: center; - выраывнивает по центру;



=============================================ТЕГИ=======================================================================
<ul></ul> - для создания пунктов
<li></li> - создает строку с пунктом



<s>текст</s> - делает текст зачеркнутым (text-decoration: line-through);
<u></u> - подчеркивает текст.
<em></em> - выделяет текст курсивом.

<hr> - разделение элементов горизонтальной линией;
background-color: rgba(45, 45, 45, 0.1) - создает цвет фона rgba(красный, зеленый, синий, прозрачность(от 0 - прозрачный до 1 - непрозрачный));

font-size: 27px - устанавливает размер текста;
font-weight: 400; - устанавливает максимальную толщину символов;
line-height: 25px; - устанавливает высоту строки текста;
justify-content: - выравнивание.
font-family: - установка шрифта.

height: 200px; - высота объекта
width: 100px; - ширина объекта

красный (#FF0000) голубой (#00FFFF) зеленый (#00FF00) пурпурный (#FF00FF) синий (#0000FF) желтый (#FFFF00)
Оранжевый (#FF7F00) голубой (#00FFFF) малина (#FF007F) - цвета в шестнадцатеричной системе

hsl(180, 80%, 25%); - регулировка оттенка по насыщенности(s) и яркости(l)

background: linear-gradient(gradient_direction, color 1, color 2, color 3, ...); - градиент перехода цвета

background: repeating-linear-gradient(   - "плосатый" градиент
                45deg,
                yellow 0px,
                yellow 40px,
                black 40px,
                black 80px
                )

background: url("https://cdn-media-1.freecodecamp.org/imgr/MJAkxbh.png"); - делает фон картинкой из ссылки

box-shadow: 0 10px 20px rgba(0,0,0,0.19) - добавление тени к элементу;
opacity: 0.7; - устанавливает прозрачность элемента (от 0 - прозрачный до 1 - непрозрачный));

трансформирование текста
text-transform: uppercase; - прописной
text-transform: lowercase; - строчный
text-transform: capitalize; - как в предложениях
text-transform: initial; - по умолчанию
text-transform: inherit; - как родительский элимент
text-transform: none; - по умолчанию

a:hover - ":hover" делает стиль рабочим при наведении на объект

position: relative; - освобождение положения текста относительно его стандартного расположения
position: absolute; - блокирование положения
position: fixed; - закрепляет на странице браузере даже при прокрутке
bottom: 10px; - вверх
top: 10px; - вниз
left: 10px; - вправо
right: 10px; - влево

float: left; - размещает элемент слева страницы
float: right; - справа

z-index: 2; - устанавливает приоритет объекта при наложении, чем выше число тем первее будет объект

margin: auto; - автоматически центрирует по горизонтали

transform: scale(1.5); - увеличивает размер элемента (в 1.5 раз)
transform: skewX(24deg); - наклон объекта по горизонтали
transform: skewY(24deg); - наклон объекта по вертикали
transform: rotate(-45deg); - поворачивает объект

---------------------------------------------------------------------
animation-name: rainbow; - анимация с именем
        animation-duration: 4s; - длительность анимации
        animation-iteration-count: infinite; - количество циклов анимации
        animation-timing-function: linear; - скорость анимации (linear - постоянная скорость анимации, ease-out - быстро затем медленно, ease-in - медленно затем быстро)
        animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75); - изменение анимации по графику
    }
        @keyframes rainbow { - параметры анимации
            0% {
                background-color: blue;
            }
            50% {
                background-color: green;
                opacity: 0.1; - исчезание элемента
            }
            100% {
                background-color: yellow;
            }
        }
--------------------------------------------------------------

animation-fill-mode: forwards; - стиль элемента послен завершения анимации

------------------------------------------------------ЦВЕТА-------------------------------------------------------------
hsl(120, 25%, 55%); - цвет с регулировкой (120 - оттенок, 25% - насыщенность, 55% - яркость)



------------------------------------------------------ТЕГИ--------------------------------------------------------------
<main></main> - тег для основной информации на странице
<div></div> - содержимое групп
<section></section> - группирует связанный контент
<article></article> - группирует независимый, автономный контент
<header></header> - предназначен для использование в теге <body>
<nav></nav> - предназначен для размещения в нем основных навигационных ссылок
<footer></footer> - используется для хранения информации об авторских правах или ссылок на связанные документы
<audio></audio> - предназначен для обертывания аудио элементов
<figure><figcaption></figcaption></figure> - предназначен для объединения изображения и описывающего его текста
<label for=""></label> - переносит текст для определения элемента
<fieldset></fieldset> - окружает группу переключателей
<legend></legend> - описывает группу переключателей (заключен в <fieldset>)
<time datetime="2013-02-13"></time> - вписывает в информацию страницы дату события




<input type="date" id="" name=""> - добавляет выбор даты
<a accesskey="b" id="" href=""></a> - "accesskey" создает "горячую" клавыишу для перехода по ссылке
<p tabindex=""></p> - добавляет фокус клавиатуры

==================================================АДАПТИВНЫЙ ДИЗАЙН=====================================================

@media (max-height: 800px) {} - принимает условие когда высота устройства меньше либо равна 800px
@media (min-height: 800px) {} - принимает условие когда высота устройства больше либо равна 800px
@media (max-width: 800px) {} - принимает условие когда ширина устройства меньше либо равна 800px
@media (min-width: 800px) {} - принимает условие когда ширина устройства больше либо равна 800px

max-width: 100%; - устанавливает ширину изображения не шире чем контейнер
height: auto; - сохраняет исходное соотношение сторон
img { height: 100px; width: 100px; } - размер изображения

vw (ширина области просмотра): 10vw будет составлять 10% от ширины области просмотра.
vh (высота окна просмотра): 3vh будет составлять 3% от высоты окна просмотра.
vmin (Минимум области просмотра): 70 vmin это будет 70% меньшего размера окна просмотра (высота или ширина).
vmax (Максимальный видовой экран): 100 vmax это будет 100% от большего размера окна просмотра (высота или ширина).

====================================================CSS Flexbox=========================================================

display: flex; - на элементе позволяет использовать другие свойства flex для создания адаптивной страницы
flex-direction: row; - выравнивает дочерние элементы по горизонтали
                column; - выравнивает дочерние элементы по вертикали
                row-reverse;
                column-reverse;

justify-content: center; - выравнивает все элементы flex по центру внутри контейнера flex.
                 flex-start; - выравнивает элементы по началу контейнера flex. Для строки это перемещает элементы слева от контейнера.
                               Для столбца это перемещает элементы в верхнюю часть контейнера. Это выравнивание по умолчанию, если не justify-contentуказано значение no.
                 flex-end; - выравнивает элементы по концу контейнера flex. Для строки это перемещает элементы справа от контейнера.
                             Для столбца это перемещает элементы в нижнюю часть контейнера.
                 space-between; - выравнивает элементы по центру главной оси с дополнительным пространством между элементами.
                                  Первый и последний элементы помещаются на самый край контейнера flex. Например, в строке первый элемент
                                  находится напротив левой стороны контейнера, последний элемент - напротив правой стороны контейнера, затем
                                  оставшееся пространство равномерно распределяется между другими элементами.
                 space-around; - аналогично space-between, но первый и последний элементы не привязаны к краям контейнера,
                                 пространство распределяется вокруг всех элементов с половиной пространства на обоих концах гибкого контейнера.
                 space-evenly; - Равномерно распределяет пространство между элементами flex с полным пространством на обоих концах контейнера flex.

align-items: flex-start; - выравнивает элементы по началу контейнера flex. Для строк это выравнивает элементы по верхней части контейнера.
                           Для столбцов это выравнивает элементы слева от контейнера.
             flex-end; - выравнивает элементы до конца контейнера flex. Для строк это выравнивает элементы по нижней части контейнера.
                         Для столбцов это выравнивает элементы справа от контейнера.
             center; - выравнивание элементов по центру. Для строк это выравнивает элементы по вертикали (равное пространство над и под элементами).
                       Для столбцов это выравнивает их по горизонтали (равное пространство слева и справа от элементов).
             stretch; - растягивайте элементы, чтобы заполнить гибкий контейнер. Например, элементы rows растягиваются, чтобы заполнить контейнер flex сверху вниз.
                        Это значение по умолчанию, если нет align-items указывается значение.
             baseline; - выравнивание элементов по их базовым линиям. Базовая линия - это текстовая концепция, думайте о ней как о строке, на которой расположены буквы.

flex-wrap: wrap; - перенос элементов в несколько строк сверху вниз, если они расположены в строках, и слева направо, если они расположены в столбцах.
           nowrap; - это значение по умолчанию, и оно не переносит элементы.
           wrap-reverse; - перенос элементов в несколько строк снизу вверх, если они находятся в строках, и справа налево, если они находятся в столбцах.

flex-shrink: 2; - уменьшает элемент в 2 раза.
flex-grow: 2; - увеличивает элемент в 2 раза.
flex-basis: 20em; - определяет начальный размер элемента.

flex: 1 0 10px; - установит элемент в flex-grow: 1; flex-shrink: 0; и flex-basis: 10px;.

align-self: ; - переопределяет значение align-items.

===================================================CSS GRID=============================================================

display: grid; - родительский элемент для GRID элементов
grid-template-columns: 100px 100px 100px; - добавляет в сетку 3 столбца шириной по 100px
grid-template-rows: 50px 50px; - добавляет в сетку 2 строки высотой по 50px
grid-template-columns: auto 50px 10% 2fr 1fr; - этот фрагмент создает пять столбцов. Первый столбец имеет ширину, равную его содержимому,
                                                второй столбец равен 50 пикселей, третий столбец составляет 10% от его контейнера и для последних двух столбцов;
                                                оставшееся пространство разделено на три секции, две выделены для четвертого столбца и одна для пятого.
grid-column-gap: 10px; - это создает 10 пикселей пустого пространства между всеми нашими столбцами.
grid-row-gap: 5px; - это создает 5 пикселей пустого пространства между всеми нашими строками.
grid-gap - имеет одно значение, это создаст разрыв между всеми строками и столбцами. Однако, если есть два значения, первое будет использоваться для установки разрыва между строками,
           а второе значение - для столбцов.
grid-column: 1 / 3; - это приведет к тому, что элемент будет начинаться с первой вертикальной строки сетки слева и простираться до 3-й строки сетки, занимая два столбца.
grid-row - объеденяет строки;
justify-self: stretch - выравнивание по горизонтали, заполняет всю ширину ячейки,
              start - выравнивает содержимое слева от ячейки,
              center - выравнивает содержимое по центру ячейки,
              end - выравнивает содержимое справа от ячейки.
align-self - выравнивание по вертикали.
-----------------------------------------
 grid-template-areas:
      "header header header"
      "advert content content"
      "footer footer footer";
----------------------------------------
item1 { grid-area: 1/1/2/4; } - Таким образом, элемент в примере будет содержать строки между строками 1 и 2 и столбцы между строками 1 и 4.
grid-template-rows: repeat(100, 50px); - создаст сетку из 100 строк, каждая строка высотой 50 пикселей.
grid-template-columns: repeat(2, 1fr 50px) 20px; - Это означает: grid-template-columns: 1fr 50px 1fr 50px 20px; - 1fr 50pxповторяется дважды, за которым следует 20 пикселей.
grid-template-columns: 100px minmax(50px, 200px); - создание двух столбцов; первый имеет ширину 100 пикселей, а второй имеет минимальную ширину 50 пикселей
                                                    и максимальную ширину 200 пикселей.
grid-template-columns: repeat(auto-fill, minmax(60px, 1fr)); - Когда контейнер изменяет размер, эта настройка продолжает вставлять столбцы размером 60 пикселей
                                                               и растягивать их до тех пор, пока не сможет вставить еще один. Примечание: Если ваш контейнер не может
                                                               разместить все ваши элементы в одной строке, он переместит их в новую строку.
grid-template-columns: repeat(auto-fit, minmax(60px, 1fr)); - растягивают ваши элементы, чтобы они соответствовали размеру контейнера.